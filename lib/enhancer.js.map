{"version":3,"sources":["../src/utils/dva-model-persist/enhancer.js"],"names":["opts","defaultOptions","key","keyPrefix","blacklist","whitelist","storage","defaultState","get","reducer","initialState","enhancer","store","createStore","dispatch","action","res","thatState","getState","_","isArray","isEmpty","pick","omit","isEqual","lastState","merge","set"],"mappings":";;;;;;;;kBAKe,YAAqB;AAAA,MAAXA,IAAW,uEAAJ,EAAI;;AAAA,0CAC6BC,gBAD7B,EACgDD,IADhD;AAAA,MAC1BE,GAD0B,wBAC1BA,GAD0B;AAAA,MACrBC,SADqB,wBACrBA,SADqB;AAAA,MACVC,SADU,wBACVA,SADU;AAAA,MACCC,SADD,wBACCA,SADD;AAAA,MACYC,OADZ,wBACYA,OADZ;;AAElC,MAAMC,eAAeD,QAAQE,GAAR,CAAeL,SAAf,SAA4BD,GAA5B,CAArB;AACA,SAAO;AAAA,WAAe,UAACO,OAAD,EAAoD;AAAA,UAA1CC,YAA0C,uEAA3BH,YAA2B;AAAA,UAAbI,QAAa;;AACxE,UAAMC,QAAQC,YAAYJ,OAAZ,eAA0BC,YAA1B,EAA2CH,YAA3C,GAA2DI,QAA3D,CAAd;AACA,eAASG,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,YAAMC,MAAMJ,MAAME,QAAN,CAAeC,MAAf,CAAZ;AACA,YAAIE,YAAYL,MAAMM,QAAN,EAAhB;AACA,YAAIC,iBAAEC,OAAF,CAAUf,SAAV,KAAwB,CAACc,iBAAEE,OAAF,CAAUhB,SAAV,CAA7B,EAAmD;AACjDY,sBAAYE,iBAAEG,IAAF,CAAOL,SAAP,EAAkBZ,SAAlB,CAAZ;AACD,SAFD,MAEO,IAAIc,iBAAEC,OAAF,CAAUhB,SAAV,KAAwB,CAACe,iBAAEE,OAAF,CAAUjB,SAAV,CAA7B,EAAmD;AACxDa,sBAAYE,iBAAEI,IAAF,CAAON,SAAP,EAAkBb,SAAlB,CAAZ;AACD;AACD,YAAI,CAACe,iBAAEK,OAAF,CAAUC,SAAV,EAAqBR,SAArB,CAAL,EAAsC;AACpCQ,sBAAYN,iBAAEO,KAAF,CAAQD,SAAR,EAAmBR,SAAnB,CAAZ;AACAX,kBAAQqB,GAAR,CAAexB,SAAf,SAA4BD,GAA5B,EAAmCuB,SAAnC;AACD;AACD,eAAOT,GAAP;AACD;AACD,0BAAWJ,KAAX,IAAkBE,kBAAlB;AACD,KAjBM;AAAA,GAAP;AAkBD,C;;AA1BD;;;;AACA;;;;;;AAEA,IAAIW,YAAY,EAAhB","file":"enhancer.js","sourcesContent":["import _ from 'lodash';\nimport defaultOptions from './config';\n\nlet lastState = {};\n\nexport default function (opts = {}) {\n  const { key, keyPrefix, blacklist, whitelist, storage } = { ...defaultOptions, ...opts};\n  const defaultState = storage.get(`${keyPrefix}:${key}`);\n  return createStore => (reducer, initialState = defaultState, enhancer) => {\n    const store = createStore(reducer, { ...initialState, ...defaultState }, enhancer);\n    function dispatch(action) {\n      const res = store.dispatch(action);\n      let thatState = store.getState();\n      if (_.isArray(whitelist) && !_.isEmpty(whitelist)) {\n        thatState = _.pick(thatState, whitelist);\n      } else if (_.isArray(blacklist) && !_.isEmpty(blacklist)) {\n        thatState = _.omit(thatState, blacklist);\n      }\n      if (!_.isEqual(lastState, thatState)) {\n        lastState = _.merge(lastState, thatState);\n        storage.set(`${keyPrefix}:${key}`, lastState);\n      }\n      return res;\n    }\n    return {...store, dispatch }\n  }\n}\n"]}